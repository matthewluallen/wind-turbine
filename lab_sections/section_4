# Homework (branch-03)

## On your own, you will:

  * Attempt to develop an adversarial procedure
  * Execute your own procedure
  * Alternatively, execute a previously developed AitM procedure (see answer below)

## Steps

  1. Deploy a new Gitpod workspace for this branch using this URL: https://gitpod.io/#https://github.com/ITI/ICS_Virtualization_Testbed-wind_turbine/tree/branch-03
  1. Browse to the public ports exposed by Gitpod for Grafana and Node-RED HMI
      * Copy the links provided on the Ports tab for Grafana and HMI (or click on `world` icon to right of links) to open two separate tabs in the browser
          * For the Node-RED HMI, use the primary URL and add `/ui` to the path, for example `https://<address>/ui`
      * For Grafana turbine dashboard &mdash; hamburger menu (upper left) > Dashboards > General > Turbine
  1. Browse to the public port exposed by Gitpod for the `adversary` container (`/vnc.html` path)
      * Copy the provided on the Ports tab for Adversary (or click on `world` icon to right of links) to open a separate in the browser
      * Click the `Connect` button in the NoVNC dialogue
      * To start a terminal &mdash; right-click on desktop > Terminal

## An Answer (but not the only answer)

  1. Open a terminal within the `adversary` container
  1. Review the `aitm.py` and `attack.sh` scripts
  1. Execute the `attack.sh` script
      * `$> bash ./attack.sh`
  1. Confirm that the weather data is still accurate in the Grafana turbine dashboard; it should report all zeros in the Node-RED UI
  1. Confirm the feathered state for the blades is enabled in both Grafana and Node-RED

At a high level, this attack puts the adversary container in the middle of the
main controller and the anemometer so it can see all of the traffic between
them. As it inspects the traffic, it looks for Modbus read input register
responses from the anemometer and replaces all the register values with zeros,
effectively making the main controller think there's no wind. With no wind, the
main controller's logic feathers the blades.

Since the Node-RED UI gets its weather data via the Modbus responses from the
anemometer, and those responses have been AitM'ed, it shows the wind values as
being zero.

However, since the Grafana dashboard gets its weather data directly from the
anemometer (via the anemometer pushing data to OpenSearch), it still shows wind
being present.

The `aitm.py` script gets executed by `mitmproxy` and does the following:

  * Grabs latest flow message from `mitmproxy`
  * Ensures there's enough bytes for the Modbus ADU/PDU
  * Parses the ADU/PDU to get Modbus function code (among other things)
  * If flow is a response, and message is a read input register response
    (function code 4), determine number of values in response and replace all of
    them with a zero value

The `attack.sh` script does the following:

  * Creates a new `tmux` session so all the activities can be shown in a single screen
  * Adds an `iptables` rule to redirect all Modbus traffic (port 502) to `mitmproxy`
  * Starts an instance of `mitmdump` (a version of `mitmproxy`) that loads the
    `aitm.py` script described above
  * Conducts `arpspoof` attacks against the main controller and the anemometer
    to put the attacker machine in the middle of their communications